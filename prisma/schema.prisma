datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums for Project and Task statuses.
enum ProjectStatus {
  pending
  in_progress
  completed
  cancelled
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
}

// User model: Represents app users. You might later expand roles/permissions.
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?    // e.g., "admin", "tradie", etc.
  businesses    Business[]
  sessions      Session[]
  tokens        Token[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Session model: For authentication sessions.
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Token model: For refresh tokens or other authentication tokens.
model Token {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Business model: Represents a tradie's business.
model Business {
  id         String    @id @default(cuid())
  name       String
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  projects   Project[]
  employees  Employee[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Employee model: Represents employees working for a business.
// The @@unique constraint ensures that the same email cannot be used twice within the same business.
model Employee {
  id         String    @id @default(cuid())
  name       String
  email      String
  businessId String
  business   Business  @relation(fields: [businessId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([businessId, email])
}

// Project model: Represents a project/job under a business.
model Project {
  id         String        @id @default(cuid())
  name       String
  description String?
  status     ProjectStatus @default(pending)
  businessId String
  business   Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  tasks      Task[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

// Task model: Represents a task within a project.
model Task {
  id         String      @id @default(cuid())
  name       String
  description String?
  status     TaskStatus  @default(pending)
  projectId  String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
